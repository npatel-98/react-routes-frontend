{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - Data/react-routes/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \" Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //...\n    // return { isError: true, message: \"Could not fetch events.\"};\n    // throw new Response( JSON.stringify({ message: \"Could not fetch events\"}), { status: 500} );\n    return json({\n      message: \"could not fetch data\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    // return resData.events;\n    // const res = new Response('any data', {status: 201});\n    // return res;\n    return resData.events;\n  }\n}\nexport function loader() {\n  return defert = defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","EventsList","useLoaderData","json","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadEvents","_c","response","fetch","ok","message","status","resData","loader","defert","$RefreshReg$"],"sources":["/Volumes/Macintosh HD - Data/react-routes/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from 'react';\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nconst EventsPage = () => {\n    const { events } = useLoaderData();\n    return (\n        <Suspense fallback={<p style={{textAlign: 'center'}} > Loading...</p>}>\n            <Await resolve={events} >\n            {\n                (loadEvents) => <EventsList events={loadEvents} />\n            }\n            </Await>\n        </Suspense>\n    )\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n    const response = await fetch('http://localhost:8080/events');\n    if (!response.ok) {\n        //...\n        // return { isError: true, message: \"Could not fetch events.\"};\n        // throw new Response( JSON.stringify({ message: \"Could not fetch events\"}), { status: 500} );\n        return json({ message: \"could not fetch data\"}, { status: 500,})\n    } else {\n        const resData = await response.json();\n        // return resData.events;\n        // const res = new Response('any data', {status: 201});\n        // return res;\n        return resData.events;\n    }\n}\n\nexport function loader(){\n    return defert = defer({\n        events: loadEvents(),\n    });\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGR,aAAa,CAAC,CAAC;EAClC,oBACIK,OAAA,CAACP,QAAQ;IAACW,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAE;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eAClEP,OAAA,CAACF,KAAK;MAACc,OAAO,EAAET,MAAO;MAAAI,QAAA,EAElBM,UAAU,iBAAKb,OAAA,CAACN,UAAU;QAACS,MAAM,EAAEU;MAAW;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEnB,CAAC;AAAAT,EAAA,CAXKD,UAAU;EAAA,QACON,aAAa;AAAA;AAAAmB,EAAA,GAD9Bb,UAAU;AAahB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAE;EACvB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;IACA,OAAOrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAAsB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpE,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACnB,IAAI,CAAC,CAAC;IACrC;IACA;IACA;IACA,OAAOwB,OAAO,CAACjB,MAAM;EACzB;AACJ;AAEA,OAAO,SAASkB,MAAMA,CAAA,EAAE;EACpB,OAAOC,MAAM,GAAGzB,KAAK,CAAC;IAClBM,MAAM,EAAEU,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAC,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}